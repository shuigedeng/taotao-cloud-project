# Copyright (c) 2020-2030, Shuigedeng (981376577@qq.com & https://blog.taotaocloud.top/).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1 #版本号 kubectl api-versions
kind: Deployment #类型 Deployment Service ...
metadata: # 资源的元数据/属性
  name: taotao-cloud-sys # 资源的名字，在同一个namespace中必须唯一
  namespace: defalult # 部署在哪个namespace中
  labels: # 设定资源的标签
    app: taotao-cloud-sys
    version: 2025.10
    kubernetes.io/cluster-service: "true"
spec: # 资源描述字段
  replicas: 1 # 声明副本数目
  minReadySeconds: 10 # 设置 pod 准备就绪的最小秒数（需要估一个比较合理的值，从容器启动到应用正常提供服务）
  progressDeadlineSeconds: 600 #定义 deploy 升级的最大时间
  revisionHistoryLimit: 10 # 保留历史版本
  selector: # 选择器
    matchLabels: # 匹配标签
      workload.user.cattle.io/workloadselector: deployment-taotao-cloud-sys
      app: taotao-cloud-sys
      version: 2025.10
      kubernetes.io/cluster-service: "true"
  strategy: # 更新策略 更多策略 1.https://www.qikqiak.com/post/k8s-deployment-strategies/
    type: RollingUpdate # 滚动更新策略
    rollingUpdate: # 滚动更新
      maxSurge: 30% # 更新时允许最大激增的容器数，可以是个数，也可以是百分比（默认 replicas 的 1/4 向上取整)
      maxUnavailable: 30% # 更新时允许最大能够进入不可用状态的容器数，可以是个数，也可以是百分比（默认 replicas 的 1/4 向上取整
  template: # 模版
    metadata: # 资源的元数据/属性
      annotations: # 自定义注解列表
        sidecar.istio.io/inject: "false" # 自定义注解名字
      labels: # 设定资源的标签
        workload.user.cattle.io/workloadselector: deployment-taotao-cloud-sys
        app: taotao-cloud-sys
        version: 2025.10
        kubernetes.io/cluster-service: "true"
    spec: # 资源规范字段
      terminationGracePeriodSeconds: 30 #优雅关闭时间，这个时间内优雅关闭未结束，k8s 强制 kill
      dnsPolicy: ClusterFirst
      imagePullSecrets: ##在 Pod 中设置 ImagePullSecrets 只有提供本身密钥的 Pod 才能访问私有仓库
        - name: ali #镜像Secrets须要在集群中手动建立
      restartPolicy: Always # Pod的重启策略
      schedulerName: default-scheduler
      securityContext: { }
      affinity: # 亲和性调试
        nodeAffinity: # 节点亲和力
          requiredDuringSchedulingIgnoredDuringExecution: # pod 必须部署到满足条件的节点上
            nodeSelectorTerms: # 节点满足任何一个条件就可以
              - matchExpressions: # 有多个选项，则只有同时满足这些逻辑选项的节点才能运行 pod
                  - key: beta.kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
        podAntiAffinity: # pod反亲和性，尽可能避免同一个应用调度到相同node
          preferredDuringSchedulingIgnoredDuringExecution: #硬需求 1.preferredDuringSchedulingIgnoredDuringExecution 软需求
            - weight: 100
              #weight 字段值的 范围是 1-100。 对于每一个符合全部调度要求（资源请求、RequiredDuringScheduling 亲和性表达式等） 的节点，调度器将遍历该字段的元素来计算总和，而且若是节点匹配对应的 MatchExpressions，则添加“权重”到总和。 而后将这个评分与该节点的其余优先级函数的评分进行组合。 总分最高的节点是最优选的。
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - ops-nginx-api
                topologyKey: "kubernetes.io/hostname"
      initContainers: #初始化容器
        - name: sidecar-sre #init 容器名称
          image: breaklinux/sidecar-sre:201210129  #docker hup仓库镜像
          imagePullPolicy: IfNotPresent  #镜像拉取策略 1.IfNotPresent若是本地存在镜像就优先使用本地镜像。2.Never直接再也不去拉取镜像了,使用本地的.若是本地不存在就报异常了。
          #3.imagePullPolicy 未被定义为特定的值，默认值设置为 Always 本地是否存在都会去仓库拉取镜像.
          env:
            #Downward API官网示例 https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/
            - name: CHJ_NODE_IP
              valueFrom:
                fieldRef: #这两种呈现 Pod 和 Container 字段的方式统称为 Downward API。
                  fieldPath: status.hostIP #获取pod 所在node IP地址设置为CHJ_NODE_IP

            - name: CHJ_POD_IP  #变量名称
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP #获取pod自身ip地址设置为CHJ_POD_IP变量名称

            - name: CHJ_APP_NAME   #应用名称EVN
              value: 'ops-nginx-api' #环境变量值

          command: [ "/bin/sh","-c" ]  #shell 执行
          args: [ "mkdir -p /scratch/.sidecar-sre && cp /sidecar/post-start.sh /scratch/.sidecar-sre/post-start.sh && /scratch/.sidecar-sre/post-start.sh" ]

          volumeMounts: #挂载日志卷和存在的空镜像
            - name: log-volume
              mountPath: /tmp/data/log/ops-nginx-api  #容器内挂载镜像路径
            - name: sidecar-sre
              mountPath: /scratch  #空镜像

          resources: #qos 设置
            limits:
              cpu: 100m #pod 占单核cpu 1/10
              memory: 100Mi #内存100M
        #hostPath 卷能将主机节点文件系统上的文件或目录挂载到你的 Pod 中。 虽然这不是大多数 Pod 须要的，可是它为一些应用程序提供了强大的逃生舱。
        #volumes:
        #  - name: log-volume  #卷名称
        #    hostPath: #卷类型详细见:https://kubernetes.io/zh/docs/concepts/storage/volumes/
        #      path: /data/logs/prod/ops-nginx-api  #宿主机存在的目录路径
        #      type: DirectoryOrCreate #若是在给定路径上什么都不存在，那么将根据须要建立空目录，权限设置为 0755，具备与 kubelet 相同的组和属主信息
        #  - name: sidecar-sre  #
        #    emptyDir: { } #emptyDir 卷的存储介质（磁盘、SSD 等）是由保存 kubelet 数据的根目录 （一般是 /var/lib/kubelet）的文件系统的介质肯定。

      containers:
        - name: taotao-cloud-sys # 容器的名字
          # 容器使用的镜像地址
          image: registry.cn-hangzhou.aliyuncs.com/taotao-cloud-decenter/taotao-cloud:taotao-cloud-sys-1.6.0:${CICD_EXECUTION_SEQUENCE}
          # 每次Pod启动拉取镜像策略，三个选择 Always、Never、IfNotPresent
          # Always，每次都检查；Never，每次都不检查（不管本地是否有）；IfNotPresent，如果本地有就不检查，如果没有就拉取
          imagePullPolicy: Always
          ports:
            - name: http # 名称
              containerPort: 9700 # 容器开发对外的端口
          env:
            - name: LOCAL_KEY
              value: value
            - name: CONFIG_MAP_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: special.type
          resources: # 资源管理
            requests: # 容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行
              cpu: 300m # 代表0.3CPU
              memory: 2048Mi
            limits: # 最大使用
              cpu: 500m # 代表0.5CPU
              memory: 2048Mi # 内存，1G = 1024Mi
          livenessProbe: # 存活探针器配置
            httpGet: # 通过httpGet检查健康，返回200-399之间，则认为容器正常
              path: /health # URI地址
              port: 9800 # 端口
              scheme: HTTP # 协议
              # host: 127.0.0.1 # 主机地址
            initialDelaySeconds: 60 # 表明第一次检测在容器启动后多长时间后开始
            timeoutSeconds: 5 # 检测的超时时间
            periodSeconds: 30 # 检查间隔时间
            successThreshold: 1 # 成功门槛
            failureThreshold: 5 # 失败门槛，连接失败5次，pod杀掉，重启一个新的pod
          readinessProbe: # Pod 准备服务健康检查设置
            failureThreshold: 3 #处于成功时状态时，探测操做至少连续多少次的失败才被视为检测不经过，显示为#failure属性.默认值为3,最小值为 1,存活探测状况下的放弃就意味着从新启动容器。
            httpGet: #1.存活探针器三种方式 1.cmd命令方式进行探测 2.http 状态码方式 3.基于tcp端口探测
              path: /healthy #k8s源码中healthz 实现 https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/liveness/server.go
              port: 8080    #应用程序监听端口
            initialDelaySeconds: 600 #存活性探测延迟时长,即容器启动多久以后再开始第一次探测操做,显示为delay属性.默认值为0，即容器启动后马上便开始进行探测.
            periodSeconds: 10  #执行探测的时间间隔（单位是秒）。默认是 10 秒。最小值是 1秒,太高的频率会对Pod对象带来较大的额外开销,而太低的频率又会使得对错误的反应不及时.
            successThreshold: 1 #处于失败状态时,探测操做至少连续多少次的成功才被人为是经过检测，显示为#success属性,默认值为1，最小值也是1
            timeoutSeconds: 3 #存活性探测的超时时长,显示为timeout属性,默认值1s,最小值也是1s
          lifecycle: #Kubernetes 支持 postStart 和 preStop 事件。 当一个容器启动后，Kubernetes 将当即发送 postStart 事件；在容器被终结以前， Kubernetes 将发送一个 preStop 事件。
            postStart: #容器建立成功后，运行前的任务，用于资源部署、环境准备等。
              exec:
                command:
                  - /bin/sh
                  - -c
                  - echo 'Hello from the postStart handler' >> /var/log/nginx/message
            preStop: #在容器被终止前的任务，用于优雅关闭应用程序、通知其余系统等等
              exec:
                command:
                  - sh
                  - -c
                  - sleep 30
          #也可以用这种方法
          #exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常
          #  command:
          #    - cat
          #    - /tmp/health
          #也可以用这种方法
          #tcpSocket: # 通过tcpSocket检查健康
          #  port: number
          volumeMounts:
            - name: log-cache
              mountPath: /tmp/log
            - name: sdb
              mountPath: /data/media
            - name: taotao-cloud-sys-nfs-client
              mountPath: /mnt/nfs
            - name: taotao-cloud-sys-volume-config
              mountPath: /etc/config
            - name: rbd-pvc
              mountPath: /sldl
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: { }
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          stdin: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true

  volumes:
    - name: log-cache
      emptyDir: { }
    - name: sdb
      hostPath:
        path: /opt/taotao/cloud/uc/data
    - name: taotao-cloud-auth-volume-config
      configMap:
        name: taotao-cloud-sys-volume-config
        items:
          - key: log-script
            path: path/to/log-script
    - name: taotao-cloud-sys-nfs-client
      nfs:
        server: 10.42.0.55
        path: /opt/public
    - name: rbd-pvc
      persistentVolumeClaim:
        claimName: rbd-pvc1

---

apiVersion: v1
kind: Service
matadata:
  name: taotao-cloud-sys-service
  namespace: taotao-cloud-prod
  labels:
    app: taotao-cloud-sys-service
    version: 1.0
    kubernetes.io/cluster-service: "true"
  annotations:
    app: taotao-cloud-sys-service
spec:
  selector:
    app: taotao-cloud-sys
  ports:
    - name: taotao-cloud-sys-service-port
      protocol: TCP
      port: 9800
      targetPort: 9800
      nodePort: 9800

---

apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler #水平pod自动收缩扩容器
metadata:
  name: taotao-cloud-hpa
  namespace: default
spec:
  scaleTargetRef: # 指定需要管理的 Deployment/ReplicaSet 的名字
    apiVersion: apps/v1
    kind: Deployment
    name: taotao-cloud-sys
  minReplicas: 3  # pod可伸缩最小范围
  maxReplicas: 10 # pod可伸缩最大范围
  metrics:
    - type: Resource  # Resource类型指标
      resource:
        name: cpu # CPU指标
        target:
          type: Utilization # Utilization类型的目标值，Resource类型的指标支持Utilization和AverageValue类型的目标值
          averageUtilization: 50  # 指定 CPU 使用率（自动扩容/缩容的触发条件）
    - type: Resource
      resource:
        name: memory  # 内存指标
        target:
          type: Utilization # Utilization类型的目标值，Resource类型的指标支持Utilization和AverageValue类型的目标值
          averageUtilization: 60  # 指定内存使用率（自动扩容/缩容的触发条件）
    - type: Pods  # Pods类型指标
      pods:
        metric:
          name: packets-per-second  # 每秒数据包
        target:
          type: AverageValue  # AverageValue类型的目标值，Pods指标类型下只支持AverageValue类型的目标值
          averageValue: 1k  # 指定每秒数据包平均值（自动扩容/缩容的触发条件）
    - type: Object  # Object类型指标
      object:
        # 监控指标的对象描述，指标数据来源于该对象
        describedObject:
          apiVersion: networking.k8s.io/v1beta1
          kind: Ingress
          name: main-route
        metric:
          name: requests-per-second # 每秒请求数
        target:
          type: Value # Value类型的目标值，Object类型的指标只支持Value和AverageValue类型的目标值
          value: 10k  # 每秒请求数平均值（自动扩容/缩容的触发条件）
