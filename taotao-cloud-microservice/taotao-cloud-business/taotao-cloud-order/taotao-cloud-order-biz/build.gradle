dependencies {
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-order:taotao-cloud-order-api")
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-sys:taotao-cloud-sys-api")
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-payment:taotao-cloud-payment-api")
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-member:taotao-cloud-member-api")
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-goods:taotao-cloud-goods-api")
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-store:taotao-cloud-store-api")
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-promotion:taotao-cloud-promotion-api")
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-operation:taotao-cloud-operation-api")
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-distribution:taotao-cloud-distribution-api")
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-message:taotao-cloud-message-api")
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-stock:taotao-cloud-stock-api")

    //cloud
    implementation "io.github.shuigedeng:taotao-cloud-starter-stream"
    implementation "io.github.shuigedeng:taotao-cloud-starter-alibaba"
    implementation "io.github.shuigedeng:taotao-cloud-starter-ttc"
    implementation "io.github.shuigedeng:taotao-cloud-starter-openfeign"
    implementation "io.github.shuigedeng:taotao-cloud-starter-seata"
    implementation "io.github.shuigedeng:taotao-cloud-starter-sentinel"

    //boot
    implementation "io.github.shuigedeng:taotao-boot-starter-apollo"
    implementation "io.github.shuigedeng:taotao-boot-starter-dubbo"
    implementation "io.github.shuigedeng:taotao-boot-starter-eventbus"
    implementation "io.github.shuigedeng:taotao-boot-starter-mq-rocketmq"
    implementation "io.github.shuigedeng:taotao-boot-starter-mq-kafka"
    implementation "io.github.shuigedeng:taotao-boot-starter-job-xxl"
    implementation "io.github.shuigedeng:taotao-boot-starter-job-schedule"
    implementation "io.github.shuigedeng:taotao-boot-starter-job-quartz"
    implementation "io.github.shuigedeng:taotao-boot-starter-job-powerjob"
    implementation "io.github.shuigedeng:taotao-boot-starter-job-snail"
    implementation "io.github.shuigedeng:taotao-boot-starter-data-shardingsphere"
    implementation "io.github.shuigedeng:taotao-boot-starter-data-elasticsearch"
    implementation "io.github.shuigedeng:taotao-boot-starter-data-mongodb"
    implementation "io.github.shuigedeng:taotao-boot-starter-grpc"
    implementation "io.github.shuigedeng:taotao-boot-starter-lock"
    implementation "io.github.shuigedeng:taotao-boot-starter-statemachine"
    implementation "io.github.shuigedeng:taotao-boot-starter-flowengine"
    implementation "io.github.shuigedeng:taotao-boot-starter-web"
    implementation "io.github.shuigedeng:taotao-boot-starter-webagg"

    //AVIATOR——轻量级JAVA表达式求值引擎 https://blog.csdn.net/ZhangQingmu/article/details/125087255
    //https://code.google.com/p/aviator/
    //http://code.google.com/p/aviator/wiki/User_Guide_zh
    //https://search.maven.org/artifact/com.googlecode.aviator/aviator
    implementation "com.googlecode.aviator:aviator:5.4.3"

    //多线程并发编程框架。为企业高并发（电商）复杂场景提供快速解决方案。 可以完美应对多种多线程高并发场景
    //https://search.maven.org/artifact/io.github.memorydoc/gobrs-async-starter
    implementation "io.github.memorydoc:gobrs-async-starter:1.3.1-RELEASE"
    implementation 'io.github.memorydoc:gobrs-async-skywalking-plugin:1.3.1-RELEASE'
    implementation 'io.github.memorydoc:gobrs-async-trace-plugin:1.3.1-RELEASE'
    implementation 'io.github.memorydoc:gobrs-async-monitor-plugin:1.3.1-RELEASE'

    //https://search.maven.org/artifact/cn.afterturn/easypoi-spring-boot-starter
    implementation "cn.afterturn:easypoi-spring-boot-starter:4.5.0"
    implementation "cn.afterturn:easypoi-base:4.5.0"
    implementation "cn.afterturn:easypoi-annotation:4.5.0"

    implementation 'com.jd.easyflow:easyflow-flow:1.6.7'
    implementation 'com.jd.easyflow:easyflow-flow-bpmn:1.6.7'
    implementation 'com.jd.easyflow:easyflow-flow-extension:1.6.7'
    implementation 'com.jd.easyflow:easyflow-fsm:1.6.7'

    //implementation 'org.smartboot.flow:smart-flow-springboot-starter:1.1.4'

    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    api "com.querydsl:querydsl-jpa:5.1.0:jakarta"
    api "jakarta.persistence:jakarta.persistence-api:3.1.0"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"
}

//dependencyManagement {
//    imports {
//        mavenBom "org.springframework.statemachine:spring-statemachine-bom:3.2.0"
//    }
//}


application {
    //指定应用程序的入口点（主类）
    mainClass = "com.taotao.cloud.order.biz.TaoTaoCloudOrderApplication"
    applicationName = "taotao-cloud-order"
}
description = "订单模块biz"

configurations {
    configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, "seconds"
        resolutionStrategy.cacheDynamicVersionsFor 0, "seconds"

        resolutionStrategy {
            //force "org.codehaus.groovy:groovy:3.0.25"
            force 'org.antlr:antlr4:4.13.2'
        }

        //exclude group: "log4j", module: "log4j"
        //exclude group: "log4j", module: "slf4j-simple"
        //exclude group: "org.slf4j", module: "slf4j-log4j12"
        //exclude group: "org.apache.logging.log4j", module: "log4j-slf4j-impl"
        //exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
        //exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
}

smartdoc {
    configFile = file("src/main/resources/smart-doc.json")
    // exclude artifact
    //exclude "org.springframework.boot:xx"
    //exclude "org.springframework.boot:ddd"
    // 你可以使用include配置来让插件自动加载指定依赖的source.
    //include "org.springframework.boot:spring-boot-starter-tomcat"
}
