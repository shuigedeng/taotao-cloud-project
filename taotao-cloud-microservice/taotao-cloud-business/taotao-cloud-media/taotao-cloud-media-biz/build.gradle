dependencies {
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-media:taotao-cloud-media-api")

    //cloud
    implementation "io.github.shuigedeng:taotao-cloud-starter-stream"
    implementation "io.github.shuigedeng:taotao-cloud-starter-alibaba"
    implementation "io.github.shuigedeng:taotao-cloud-starter-ttc"
    implementation "io.github.shuigedeng:taotao-cloud-starter-openfeign"
    implementation "io.github.shuigedeng:taotao-cloud-starter-seata"
    implementation "io.github.shuigedeng:taotao-cloud-starter-sentinel"

    //boot
    implementation "io.github.shuigedeng:taotao-boot-starter-apollo"
    implementation "io.github.shuigedeng:taotao-boot-starter-dubbo"
    implementation "io.github.shuigedeng:taotao-boot-starter-eventbus"
    implementation "io.github.shuigedeng:taotao-boot-starter-mq-kafka"
    implementation "io.github.shuigedeng:taotao-boot-starter-mq-rocketmq"
    implementation "io.github.shuigedeng:taotao-boot-starter-job-xxl"
    implementation "io.github.shuigedeng:taotao-boot-starter-job-schedule"
    implementation "io.github.shuigedeng:taotao-boot-starter-job-quartz"
    implementation "io.github.shuigedeng:taotao-boot-starter-job-powerjob"
    implementation "io.github.shuigedeng:taotao-boot-starter-job-snail"
    implementation "io.github.shuigedeng:taotao-boot-starter-grpc"
    implementation "io.github.shuigedeng:taotao-boot-starter-lock"
    implementation "io.github.shuigedeng:taotao-boot-starter-web"
    implementation "io.github.shuigedeng:taotao-boot-starter-webagg"
    implementation "io.github.shuigedeng:taotao-boot-starter-statemachine"
    implementation "io.github.shuigedeng:taotao-boot-starter-flowengine"

    //开源OCR识别框架Tess4j
    //https://tess4j.sourceforge.net/
    //https://search.maven.org/artifact/net.sourceforge.tess4j/tess4j
    implementation "net.sourceforge.tess4j:tess4j:5.16.0"
    implementation "com.google.zxing:core:3.5.3"
    implementation "com.google.zxing:javase:3.5.3"

    //官网文档地址：https://docs.opencv.org/4.9.0/df/d65/tutorial_table_of_content_introduction.html
    //教程参考：https://www.w3cschool.cn/opencv/
    //教程参考：https://www.yiibai.com/opencv/opencv_adding_text.html
    //下载地址：https://opencv.org/releases/
    //implementation fileTree(dir: "src/main/resource/lib", includes: ["*.jar"])
    //-Djava.library.path=-D:\WorkSpace\projectName\demo\lib\opencv_java460.dll
    implementation files("src/main/resources/lib/opencv-2413.jar")

    implementation files("src/main/resources/sdk/jna.jar")
    implementation files("src/main/resources/sdk/examples.jar")

    implementation "io.netty:netty-all"

    //https://search.maven.org/artifact/org.bytedeco/javacv
    //http://bytedeco.org
    implementation "org.bytedeco:javacv:1.5.12"
    implementation "org.bytedeco:ffmpeg:7.1.1-1.5.12:linux-x86_64"

    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    api "com.querydsl:querydsl-jpa:5.1.0:jakarta"
    api "jakarta.persistence:jakarta.persistence-api:3.1.0"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"

    //基于海康威视网络摄像机和NVR录像机的SDK二次开发, https://github.com/waimifeier/hikvision-spring-boot-starter
    //compile 'com.github.waimifeier:hikvision-spring-boot-starter:1.2.10'

    //mqtt-spring-boot-starter https://github.com/tocrhz/mqtt-spring-boot-starter
    //https://search.maven.org/artifact/com.github.tocrhz/mqtt-spring-boot-starter
    //compile 'com.github.tocrhz:mqtt-spring-boot-starter:2.0.2'

    //电子印章的一站式解决方案
    //使用 Spring Boot 3.x 与图形学技术，添加电子印章防伪特征
    implementation 'com.github.jai-imageio:jai-imageio-core:1.4.0'

    //jave-all-deps 库提供了一个简洁而强大的解决方案，让 Java 开发者能够轻松地进行音视频文件的转码和处理。
    // jave-all-deps 是 JAVE2（Java Audio Video Encoder）项目的一部分，它是一个基于 ffmpeg 项目的 Java 封装库。JAVE2 通过		//提供一套简单易用的 API，允许 Java 开发者在不直接处理 ffmpeg 复杂命令的情况下，进行音视频文件的格式转换、转码、剪辑等操作。
    // 整体上来说，jave-all-deps 帮我们解决了三大类问题：
    // 跨平台兼容性问题：音视频处理往往涉及到不同的操作系统和硬件架构，jave-all-deps 库提供了针对不同平台的预编译 ffmpeg 二进制文	//	使得开发者无需担心平台兼容性问题。
    // 复杂的命令行操作：ffmpeg 虽然功能强大，但其命令行接口复杂且难以记忆。jave-all-deps 通过封装 ffmpeg 的命令行操作，提供了简洁易	//	用的 Java API，降低了使用门槛。
    // 依赖管理：在项目中集成音视频处理功能时，往往需要处理多个依赖项。jave-all-deps 库将核心代码和所有必要的二进制文件打包在一起，简化	//	了依赖管理。
    // 库中包含了不同平台所依赖的库的内容。
    //implementation 'ws.schild:jave-all-deps:3.5.0'
    // 根据自己平台选择不同的依赖库，这种方式需要首先添加 java-core
    //implementation 'ws.schild:jave-core:3.5.0'
    // Linux 64 位 amd/intel：
    //implementation 'jave-nativebin-linux64:3.5.0'
    // Linux 64 位 arm：
    //implementation 'jave-nativebin-linux-arm64:3.5.0'
    // Linux 32 位 arm：
    //implementation 'jave-nativebin-linux-arm32:3.5.0'
    // Windows 64 位：
    //implementation 'jave-nativebin-win64:3.5.0'
    // MacOS 64 位：
    // //库中包含了不同平台所依赖的库的内容。
    //implementation 'ws.schild:jave-all-deps:3.5.0'
    // //根据自己平台选择不同的依赖库，这种方式需要首先添加 java-core
    //implementation 'ws.schild:jave-core:3.5.0'
    // //Linux 64 位 amd/intel：
    //implementation 'jave-nativebin-linux64:3.5.0'
    // //Linux 64 位 arm：
    //implementation 'jave-nativebin-linux-arm64:3.5.0'
    // //Linux 32 位 arm：
    //implementation 'jave-nativebin-linux-arm32:3.5.0'
    // //Windows 64 位：
    //implementation 'jave-nativebin-win64:3.5.0'////MacOS 64 位：
    //implementation 'jave-nativebin-osx64:3.5.0'

}

application {
    //指定应用程序的入口点（主类）
    mainClass = "com.taotao.cloud.media.biz.TaotaoCloudMediaApplication"
    applicationName = "taotao-cloud-media"
}
description = "多媒体模块biz"

configurations {
    configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, "seconds"
        resolutionStrategy.cacheDynamicVersionsFor 0, "seconds"

       //resolutionStrategy {
       //    //force "org.codehaus.groovy:groovy:3.0.25"
       //    force 'org.antlr:antlr4:4.13.2'
       //}

        //exclude group: "log4j", module: "log4j"
        //exclude group: "log4j", module: "slf4j-simple"
        //exclude group: "org.slf4j", module: "slf4j-log4j12"
        //exclude group: "org.apache.logging.log4j", module: "log4j-slf4j-impl"
        //exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
        //exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
}

smartdoc {
    configFile = file("src/main/resources/smart-doc.json")
    // exclude artifact
    //exclude "org.springframework.boot:xx"
    //exclude "org.springframework.boot:ddd"
    // 你可以使用include配置来让插件自动加载指定依赖的source.
    //include "org.springframework.boot:spring-boot-starter-tomcat"
}
