import org.apache.tools.ant.filters.ReplaceTokens

def getProperty(String key, String defaultValue) {
    def keyValue = findProperty(key) ?: System.getenv(key)
    if (keyValue != null) {
        return keyValue;
    }
    // 加载根路径自定义配置属性
    Properties envProps = new Properties()
    envProps.load(new FileInputStream("${rootProject.projectDir.absolutePath}${File.separator}taotao-cloud-microservice${File.separator}release.properties"))

    keyValue = envProps.getProperty(key, defaultValue)
    println("打包profile环境==============" + keyValue)
    return keyValue
}

configure(subprojects){ project ->
    if(!(project.name.endsWith("-ui")  ||
            project.name.endsWith("-api")  ||
            project.name.endsWith("-application")  ||
            project.name.endsWith("-common")  ||
            project.name.endsWith("-domain")  ||
            project.name.endsWith("-facade")  ||
            project.name.endsWith("-infrastructure")  ||
            project.name.endsWith("-integration"))){
        //apply from: rootProject.file('gradle/sonar.gradle')
        apply from: rootProject.file('gradle/shadow.gradle')
        //apply from: rootProject.file('gradle/graalvm.gradle')
        apply from: rootProject.file('gradle/swagger.gradle')
        apply from: rootProject.file('gradle/smart-doc.gradle')
        apply from: rootProject.file('gradle/springdoc-openapi.gradle')
        apply from: rootProject.file('gradle/docker.gradle')
        apply from: rootProject.file('gradle/google-tools-jib.gradle')
        apply from: rootProject.file('gradle/springboot.gradle')
        apply from: rootProject.file('gradle/mybatis-generator.gradle')

        //多项目分环境打包
        //gradle构建过程中的默认任务processResources，重写
        //gradle build -x test -Pprofile=dev
        //gradle -x test clean bootJar -Pprofile=dev
        processResources {
            doFirst {
                //过滤器会将用 @var@ 包裹的变量，替换为指定的值。
                filter ReplaceTokens, tokens: [activeProfile: getProperty("profile", "dev")]


                //${profile}变量
                //filesMatching("**/*.yml"){
                //    expand(project.properties)
                //}

                //inputs.property('version', version)

                //filesMatching("**/version.properties") {
                //    expand version: version
                //}
            }
        }

        tasks.register('createProperties') {
            dependsOn processResources
            doLast {
                def fileDir = new File("${project.layout.buildDirectory.asFile.get()}/resources/main");
                if (fileDir.exists() && fileDir.isDirectory()) {
                    def pro = ["application.properties", "bootstrap.properties"]
                    pro.forEach(item -> {
                        new File("${project.layout.buildDirectory.asFile.get()}/resources/main/$item").withWriter { w ->
                            def projectProperties = project.properties
                            Properties p = new Properties()
                            projectProperties.each { entry ->
                                p[entry.key.toString()] = entry.value.toString()
                            }

                            p.store w, null
                        }
                    })
                }
            }
        }

        classes {
            dependsOn 'createProperties'
        }

        tasks.register('bootJarTest') {
            dependsOn 'clean'
            doFirst {
                System.setProperty("profile", "test")
            }
            finalizedBy("bootJar")
        }

        tasks.register('bootJarProduction') {
            dependsOn 'clean'
            doFirst {
                System.setProperty("profile", "prod")
            }
            finalizedBy("bootJar")
        }
    }

    dependencies {
        //developmentOnly "org.springframework.boot:spring-boot-devtools"
        //developmentOnly "org.springframework.boot:spring-boot-docker-compose"

        testImplementation "io.github.shuigedeng:taotao-boot-starter-test"
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testImplementation "org.assertj:assertj-core:3.27.4"

        implementation "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

        implementation "io.soabase.record-builder:record-builder-core"
        annotationProcessor "io.soabase.record-builder:record-builder-processor:${recordBuilderVersion}"

        implementation "org.mapstruct:mapstruct"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructProcessorVersion}"
        //https://github.com/entur/mapstruct-spi-protobuf
        //https://search.maven.org/artifact/no.entur.mapstruct.spi/protobuf-spi-impl
        annotationProcessor "no.entur.mapstruct.spi:protobuf-spi-impl:1.52.0"

        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    }
}
