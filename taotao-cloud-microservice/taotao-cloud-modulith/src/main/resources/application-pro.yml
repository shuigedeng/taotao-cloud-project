server:
  port: 33307
  shutdown: graceful
  http2:
    enabled: true
  undertow:
    buffer-size: 2048
    direct-buffers: true
    threads:
      io: 16
      worker: 256
    accesslog:
      dir: ${user.home}/logs/${spring.application.name}/undertow
      enabled: true
  servlet:
    application-display-name: ${spring.application.name}
    #context-path: sys

jasypt:
  encryptor:
    password: ${TAOTAO_CLOUD_ENCRYPTOR_PASSWORD:taotao-cloud}
    algorithm: PBEWITHHMACSHA512ANDAES_256
    property:
      prefix: "ENC@["
      suffix: "]"

jetcache:
  statIntervalMinutes: 1
  areaInCacheName: false
  local:
    default:
      type: linkedhashmap
      keyConvertor: jacksonKeyConvertor
  #remote:
  #  default:
  #    type: redis
  #    keyConvertor: jacksonKeyConvertor
  #    valueEncoder: jacksonValueEncoder
  #    valueDecoder: jacksonValueDecoder
  #    poolConfig:
  #      minIdle: 5
  #      maxIdle: 20
  #      maxTotal: 50
  #    host: 192.168.218.2
  #    port: 6379

easy-es:
  enable: false
  # es连接地址+端口 格式必须为ip:port,如果是集群则可用逗号隔开
  address: 192.168.218.2:9200
  # 默认为http
  schema: http
  #如果无账号密码则可不配置此行
  username:
  #如果无账号密码则可不配置此行
  password:
  # 连接超时时间 单位:ms
  connectTimeout: 5000
  # 通信超时时间 单位:ms
  socketTimeout: 5000
  # 请求超时时间 单位:ms
  requestTimeout: 5000
  # 连接请求超时时间 单位:ms
  connectionRequestTimeout: 5000
  # 最大连接数 单位:个
  maxConnTotal: 100
  # 最大连接路由数 单位:个
  maxConnPerRoute: 100
  global-config:
    db-config:
      # 索引前缀,可用于区分环境  默认为空
      table-prefix: tt_
      # id生成策略 默认为auto
      id-type: none
      # 字段更新策略 默认为not_null
      field-strategy: IGNORED

redisson:
  #在Redis节点里显示的客户端名称。
  client-name: ${spring.application.name}
  #用于节点身份验证的密码
  password: taotao-cloud
  #锁的模式.如果不设置, REENTRANT(可重入锁),FAIR(公平锁),MULTIPLE(联锁),REDLOCK(红锁),READ(读锁), WRITE(写锁)
  lock-model: auto
  #集群模式:SINGLE(单例),SENTINEL(哨兵),MASTERSLAVE(主从),CLUSTER(集群),REPLICATED(云托管)
  model: cluster
  #Redisson的对象编码类是用于将对象进行序列化和反序列化，以实现对该对象在Redis里的读取和存储
  codec: "com.zengtengpeng.codec.MyJsonJacksonCodec"
  #这个线程池数量被所有RTopic对象监听器，RRemoteService调用者和RExecutorService任务共同共享。
  threads: 16
  #这个线程池数量是在一个Redisson实例内，被其创建的所有分布式数据类型和服务，以及底层客户端所一同共享的线程池里保存的线程数量。
  netty_threads: 32
  #TransportMode.NIO,TransportMode.EPOLL - 需要依赖里有netty-transport-native-epoll包（Linux） TransportMode.KQUEUE - 需要依赖里有 netty-transport-native-kqueue包（macOS）
  transport_mode: nio
  #如果当前连接池里的连接数量超过了最小空闲连接数，而同时有连接空闲时间超过了该数值，那么这些连接将会自动被关闭，并从连接池里去掉。时间单位是毫秒
  idleConnectionTimeout: 1000
  #同任何节点建立连接时的等待超时。时间单位是毫秒
  connectTimeout: 1000
  #等待节点回复命令的时间。该时间从命令发送成功时开始计时。
  timeout: 3000
  #如果尝试达到 retryAttempts（命令失败重试次数） 仍然不能将命令发送至某个指定的节点时，将抛出错误。如果尝试在此限制之内发送成功，则开始启用 timeout（命令等待超时） 计时。
  retryAttempts: 3
  #在一条命令发送失败以后，等待重试发送的时间间隔。时间单位是毫秒。
  retryInterval: 1500
  #	每个连接的最大订阅数量。
  subscriptionsPerConnection: 5
  #开启SSL终端识别能力。
  sslEnableEndpointIdentification: true
  #确定采用哪种方式（JDK或OPENSSL）来实现SSL连接。
  ssl-provider: jdk
  ssl-truststore:
  ssl-truststore-password:
  ssl-keystore:
  ssl-keystore-password:
  #监控锁的看门狗超时时间单位为毫秒。该参数只适用于分布式锁的加锁请求中未明确使用leaseTimeout参数的情况。如果该看门口未使用lockWatchdogTimeout去重新调整一个分布式锁的lockWatchdogTimeout超时，那么这个锁将变为失效状态。这个参数可以用来避免由Redisson客户端节点宕机或其他原因造成死锁的情况。
  lockWatchdogTimeout: 30000
  #通过该参数来修改是否按订阅发布消息的接收顺序出来消息，如果选否将对消息实行并行处理，该参数只适用于订阅发布消息的情况。
  keepPubSubOrder: true
  pingConnectionInterval: 30000
  keepAlive: false
  tcpNoDelay: false
  referenceEnabled: true
  useScriptCache: false
  minCleanUpDelay: 5
  maxCleanUpDelay: 1800
  #等待获取锁超时时间,-1则是一直等待
  attemptTimeout: 10000
  dataValidTime: 1800000
  single_server_config:
    #服务器地址,必填ip:port
    address: "192.168.218.2:6379"
    #用于发布和订阅连接的最小保持连接数（长连接）。Redisson内部经常通过发布和订阅来实现许多功能。长期保持一定数量的发布订阅连接是必须的。
    subscription_connection_minimum_idle_size: 1
    #用于发布和订阅连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
    subscription_connection_pool_size: 50
    #最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时写入反应速度。
    connection_minimum_idle_size: 24
    #连接池最大容量。连接池的连接数量自动弹性伸缩。
    connection_pool_size: 64
    #尝试连接的数据库编号。
    database: 3
    #用来指定检查节点DNS变化的时间间隔。使用的时候应该确保JVM里的DNS数据的缓存时间保持在足够低的范围才有意义。用-1来禁用该功能。
    dns_monitoring_interval: 5000
  multiple-server-config:
    #在多Redis服务节点的环境里，可以选用以下几种负载均衡方式选择一个节点：
    #org.redisson.connection.balancer.WeightedRoundRobinBalancer - 权重轮询调度算法
    #org.redisson.connection.balancer.RoundRobinLoadBalancer - 轮询调度算法
    #org.redisson.connection.balancer.RandomLoadBalancer - 随机调度算法
    loadBalancer: "org.redisson.connection.balancer.RoundRobinLoadBalancer"
    #多从节点的环境里，每个 从服务节点里用于普通操作（非 发布和订阅）的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时读取反映速度。
    slaveConnectionMinimumIdleSize: 32
    #多从节点的环境里，每个 从服务节点里用于普通操作（非 发布和订阅）连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
    slaveConnectionPoolSize: 64
    failedSlaveReconnectionInterval: 3000
    failedSlaveCheckInterval: 180000
    #多节点的环境里，每个 主节点的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时写入反应速度。
    masterConnectionMinimumIdleSize: 32
    #多主节点的环境里，每个 主节点的连接池最大容量。连接池的连接数量自动弹性伸缩。
    masterConnectionPoolSize: 64
    #设置读取操作选择节点的模式。 可用值为： SLAVE - 只在从服务节点里读取。 MASTER - 只在主服务节点里读取。 MASTER_SLAVE - 在主从服务节点里都可以读取。
    readMode: slave
    #设置订阅操作选择节点的模式。 可用值为： SLAVE - 只在从服务节点里订阅。 MASTER - 只在主服务节点里订阅。
    subscriptionMode: slave
    #用于发布和订阅连接的最小保持连接数（长连接）。Redisson内部经常通过发布和订阅来实现许多功能。长期保持一定数量的发布订阅连接是必须的。 redisson.multiple-server-config.subscriptionConnectionPoolSize
    subscriptionConnectionMinimumIdleSize: 1
    subscriptionConnectionPoolSize: 50
    #监测DNS的变化情况的时间间隔。
    dnsMonitoringInterval: 5000
    #服务器节点地址.必填
    #redisson.multiple-server-config.node-addresses[0]=192.168.218.2:6379
    #redisson.multiple-server-config.node-addresses[1]=192.168.218.2:6380
    #redisson.multiple-server-config.node-addresses[2]=192.168.218.2:6381
    nodeAddresses:
      - "192.168.218.2:6381"
      - "192.168.218.2:6382"
      - "192.168.218.2:6383"
      - "192.168.218.2:6384"
      - "192.168.218.2:6385"
      - "192.168.218.2:6386"
    #(哨兵模式,云托管,主从模式特有)尝试连接的数据库编号。
    database: 1
    #(哨兵模式特有)主服务器的名称是哨兵进程中用来监测主从服务切换情况的。
    masterName:
    #(集群,哨兵,云托管模特特有) 对Redis集群节点状态扫描的时间间隔。单位是毫秒。
    scanInterval: 1000

elasticjob:
  #dump:
  #  port: 9888
  #tracing:
  #  type: RDB
  reg-center:
    server-lists: 192.168.218.2:2181,192.168.218.2:2182,192.168.218.2:2183
    namespace: taotao-cloud-elasticjob
  jobs:
    taotao-cloud-simple-job:
      elastic-job-class: com.taotao.cloud.sys.biz.task.elastic.TaoTaoSimpleJob
      jobBootstrapBeanName: taoTaoSimpleBootstrapJob
      cron: 0 0/30 * * * ?
      timeZone: GMT+08:00
      shardingTotalCount: 3
      shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
      description: MySimpleJob
      overwrite: false
      job-parameter: hello javaboy!
      jobExecutorServiceHandlerType: myJobExecutorServiceHandler
      jobListenerTypes:
        - myJobListener
      jobErrorHandlerType: EMAIL
      props:
        dingtalk:
          webhook: you_webhook
          keyword: taotao-cloud
          secret: you_secret
          connectTimeout: 3000
          readTimeout: 5000
        email:
          host: smtp.qq.com
          port: 465
          username: 981376577@qq.com
          password: ${TAOTAO_CLOUD_MAIL_PASSWORD:taotao-cloud}
          useSsl: true
          subject:
          from: 981376577@qq.com
          to: 981376577@qq.com
          cc:
          bcc:
          debug: false
    taotao-cloud-data-flow-job:
      elastic-job-class: com.taotao.cloud.sys.biz.task.elastic.TaoTaoDataflowJob
      jobBootstrapBeanName: taoTaoDataflowBootstrapJob
      cron: 0 0/30 * * * ?
      timeZone: GMT+08:00
      shardingTotalCount: 3
      shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
    taotao-cloud-script-job:
      elasticJobType: SCRIPT
      jobBootstrapBeanName: taoTaoScriptBootstrapJob
      cron: 0 0/30 * * * ?
      shardingTotalCount: 3
      props:
        script.command.line: "echo SCRIPT Job: "
    taotao-cloud-manual-script-job:
      elasticJobType: SCRIPT
      jobBootstrapBeanName: taoTaoManualScriptBootstrapJob
      shardingTotalCount: 9
      props:
        script.command.line: "echo Manual SCRIPT Job: "

arthas:
  # telnetPort、httpPort为 -1 ，则不listen telnet端口，为 0 ，则随机telnet端口
  # 如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口，或者配置为 -1，并且通过tunnel server来使用arthas。
  # ~/logs/arthas/arthas.log (用户目录下面)里可以找到具体端口日志
  telnetPort: -1
  httpPort: -1
  # 192.168.218.2只能本地访问，0.0.0.0则可网络访问，但是存在安全问题
  ip: 0.0.0.0
  agent-id: ${spring.application.name}
  app-name: ${spring.application.name}
  tunnel-server: ws://192.168.218.2:7777/ws

dubbo:
  scan:
    base-packages: com.taotao.cloud.sys.biz.service.dubbo
  application:
    id: ${spring.application.name}
    name: ${spring.application.name}
    version: ${ttcVersion}
    owner: 981376577
    architecture: china
    organization: taotao-cloud
    metadata-type: local
    environment: develop
    qos-port: 20880
    #禁用qos同一台集群可能会有端口冲突现象
    qos-enable: false
    qos-accept-foreign-ip: false
    logger: slf4j
  cloud:
    subscribed-services: taotao-cloud-order
    registry-type: spring-cloud
  registry:
    address: nacos://192.168.218.2:8848
    group: DUBBO_REGISTRY_GROUP
    parameters:
      namespace: 343852d5-6e0d-4e27-8719-7866452e5ab0
    timeout: 15000
    username: nacos
    password: nacos
    protocol: dubbo
    version: ${ttcVersion}
    check: false
    register: true
    weight: 10
    subscribe: true
    use-as-config-center: false
    use-as-metadata-center: false
  protocol:
    name: dubbo
    port: 20883
    ssl-enabled: false
    accesslog: ${user.home}/logs/${spring.application.name}/dubbo/access.log
    #serialization: kryo
    status: server
    payload: 83886080
    threadpool: fixed
    threadname: taotao-cloud-dubbo-executor
    threads: 200
  provider:
    timeout: 300000
    loadbalance: roundrobin
    version: ${ttcVersion}
    threads: 500
    #retries: -1
    #delay: 3000 #延时注册服务（毫秒）
  consumer:
    check: false
    timeout: 300000
    loadbalance: roundrobin
    version: ${ttcVersion}
    threads: 100
  #module:
  #  name: ${spring.application.name}
  #monitor:
  #  id: ${spring.application.name}
  #metadata-report:
  #  id: ${spring.application.name}
  config-center:
    check: false

seata:
  enabled: true
  application-id: ${spring.application.name}
  # 事务群组（可以每个应用独立取名，也可以使用相同的名字）
  tx-service-group: taotao-cloud-tx-group
  enable-auto-data-source-proxy: true
  use-jdk-proxy: false
  service:
    grouplist:
      SC: 192.168.218.2:8091,192.168.218.2:8092,192.168.218.2:8093
    # TC 集群（必须与seata-server保持一致）
    vgroupMapping:
      taotao-cloud-tx-group: SC
    # 降级开关
    enable-degrade: false
    # 禁用全局事务（默认false）
    disable-global-transaction: false
  config:
    type: nacos
    nacos:
      namespace: 2f271160-9db6-4a58-b076-d521bb7535a5
      server-addr: 192.168.218.2:8848
      group: SEATA_GROUP
      username: ${TAOTAO_CLOUD_SEATA_CONFIG_NACOS_USERNAME:nacos}
      password: ${TAOTAO_CLOUD_SEATA_CONFIG_NACOS_PASSWORD:nacos}
      data-id: client.properties
  registry:
    type: nacos
    nacos:
      application: seata-server
      server-addr: 192.168.218.2:8848
      group: SEATA_GROUP
      namespace: 2f271160-9db6-4a58-b076-d521bb7535a5
      username: ${TAOTAO_CLOUD_SEATA_REGISTRY_NACOS_USERNAME:nacos}
      password: ${TAOTAO_CLOUD_SEATA_REGISTRY_NACOS_PASSWORD:nacos}
      cluster: SC
  client:
    rm:
      # 异步提交缓存队列长度（默认10000）
      async-commit-buffer-limit: 10000
      # 一阶段结果上报TC重试次数（默认5）
      report-retry-count: 5
      # 自动刷新缓存中的表结构（默认false）
      table-meta-check-enable: false
      report-success-enable: true
      saga-branch-register-enable: false
      lock:
        # 校验或占用全局锁重试间隔（默认10ms）
        retry-interval: 10
        # 校验或占用全局锁重试次数（默认30）
        retry-times: 30
        # 分支事务与其它全局回滚事务冲突时锁策略（优先释放本地锁让回滚成功）
        retry-policy-branch-rollback-on-conflict: true
    tm:
      # 一阶段全局提交结果上报TC重试次数（默认1次，建议大于1）
      commit-retry-count: 5
      # 一阶段全局回滚结果上报TC重试次数（默认1次，建议大于1）
      rollback-retry-count: 5
      degrade-check: false
      degrade-check-period: 2000
      degrade-check-allow-times: 10
    undo:
      # 二阶段回滚镜像校验（默认true开启）
      data-validation: true
      # undo序列化方式（默认jackson 不支持 LocalDateTime）
      log-serialization: jackson
      only-care-update-columns: true
      # 自定义undo表名（默认undo_log）
      log-table: undo_log
  log:
    # 日志异常输出概率（默认100）
    exception-rate: 100
  transport:
    shutdown:
      wait: 3
    thread-factory:
      boss-thread-prefix: TaoTaoCloudSysNettyBoss
      worker-thread-prefix: TaoTaoCloudSysNettyServerNIOWorker
      server-executor-thread-prefix: TaoTaoCloudSysNettyServerBizHandler
      share-boss-worker: false
      client-selector-thread-prefix: TaoTaoCloudSysNettyClientSelector
      client-selector-thread-size: 1
      client-worker-thread-prefix: TaoTaoCloudSysNettyClientWorkerThread
    type: TCP
    server: NIO
    heartbeat: true
    serialization: seata
    compressor: none
    # 客户端事务消息请求是否批量合并发送（默认true）
    enable-client-batch-send-request: true

spring:
  config:
    activate:
      on-profile: pro
  #  dynamic:
  #    tp:
  #      enabled: true
  #      enabledBanner: true           # 是否开启banner打印，默认true
  #      enabledCollect: true          # 是否开启监控指标采集，默认false
  #      collectorTypes: micrometer,logging     # 监控数据采集器类型（logging | micrometer | internal_logging），默认micrometer
  #      logPath: ${user.home}/logs/${spring.application.name}/dynamic-tp/access.log          # 监控日志数据路径，默认 ${user.home}/logs
  #      monitorInterval: 5            # 监控时间间隔（报警判断、指标采集），默认5s
  #      platforms: # 通知报警平台配置
  #        - platform: wechat
  #          urlKey: 3a7500-1287-4bd-a798-c5c3d8b69c  # 替换
  #          receivers: test1,test2                   # 接受人企微名称
  #        - platform: ding
  #          urlKey: f80dad441fcd655438f4a08dcd6a     # 替换
  #          secret: SECb5441fa6f375d5b9d21           # 替换，非sign模式可以没有此值
  #          receivers: 15810119805                   # 钉钉账号手机号
  #        - platform: lark
  #          urlKey: 0d944ae7-b24a-40                 # 替换
  #          receivers: test1,test2                   # 接受人飞书名称/openid
  #      tomcatTp: # tomcat web server线程池配置
  #        corePoolSize: 100
  #        maximumPoolSize: 400
  #        keepAliveTime: 60
  #      jettyTp: # jetty web server线程池配置
  #        corePoolSize: 100
  #        maximumPoolSize: 400
  #      undertowTp: # undertow web server线程池配置
  #        corePoolSize: 100
  #        maximumPoolSize: 400
  #        keepAliveTime: 60
  #      hystrixTp: # hystrix 线程池配置
  #        - threadPoolName: hystrix1
  #          corePoolSize: 100
  #          maximumPoolSize: 400
  #          keepAliveTime: 60
  #      dubboTp: # dubbo 线程池配置
  #        - threadPoolName: dubboTp#20880
  #          corePoolSize: 100
  #          maximumPoolSize: 400
  #          keepAliveTime: 60
  #      rocketMqTp: # rocketmq 线程池配置
  #        - threadPoolName: group1#topic1
  #          corePoolSize: 200
  #          maximumPoolSize: 400
  #          keepAliveTime: 60
  #      executors: # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量
  #        - threadPoolName: dtpExecutor1
  #          executorType: common                     # 线程池类型common、eager：适用于io密集型
  #          corePoolSize: 6
  #          maximumPoolSize: 8
  #          queueCapacity: 200
  #          queueType: VariableLinkedBlockingQueue   # 任务队列，查看源码QueueTypeEnum枚举类
  #          rejectedHandlerType: CallerRunsPolicy    # 拒绝策略，查看RejectedTypeEnum枚举类
  #          keepAliveTime: 50
  #          allowCoreThreadTimeOut: false                  # 是否允许核心线程池超时
  #          threadNamePrefix: test                         # 线程名前缀
  #          waitForTasksToCompleteOnShutdown: false        # 参考spring线程池设计，优雅关闭线程池
  #          awaitTerminationSeconds: 5                     # 单位（s）
  #          preStartAllCoreThreads: false                  # 是否预热所有核心线程，默认false
  #          runTimeout: 200                                # 任务执行超时阈值，目前只做告警用，单位（ms）
  #          queueTimeout: 100                              # 任务在队列等待超时阈值，目前只做告警用，单位（ms）
  #          taskWrapperNames: [ "ttl" ]                          # 任务包装器名称，集成TaskWrapper接口
  #          notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警）
  #            - type: capacity               # 报警项类型，查看源码 NotifyTypeEnum枚举类
  #              enabled: true
  #              threshold: 80                # 报警阈值
  #              platforms: [ ding,wechat ]     # 可选配置，不配置默认拿上层platforms配置的所以平台
  #              interval: 120                # 报警间隔（单位：s）
  #            - type: change
  #              enabled: true
  #            - type: liveness
  #              enabled: true
  #              threshold: 80
  #            - type: reject
  #              enabled: true
  #              threshold: 1
  #            - type: run_timeout
  #              enabled: true
  #              threshold: 1
  #            - type: queue_timeout
  #              enabled: true
  #              threshold: 1
  gobrs:
    async:
      enable: true
      rules:
        - name: "general"
          content: "AService->BService->FService->GService->HService;EService->CService;AService"
        #- name: "anyConditionRule"
        #  content: "AServiceCondition,BServiceCondition,CServiceCondition->DServiceCondition:anyCondition"
        #- name: "anyConditionRuleAppend"
        #  content: "AServiceCondition,BServiceCondition,CServiceCondition->DServiceCondition:anyCondition->EServiceCondition"
      #局部异常是否打断主流程
      task-interrupt: true
      transaction: true

  quartz:
    scheduler-name: taotaoCloudQuartzScheduler
    # 将任务等保存化到数据库
    job-store-type: jdbc
    # 关闭时等待任务完成
    wait-for-jobs-to-complete-on-shutdown: true
    # 可以覆盖已有的任务
    overwrite-existing-jobs: true
    auto-startup: true
    jdbc:
      # 是否自动使用 SQL 初始化 Quartz 表结构
      initialize-schema: never
    properties:
      org:
        quartz:
          scheduler:
            # 调度器实例名称
            instanceName: taotaoCloudQuartzScheduler
            # 调度器实例ID自动生成
            instanceId: AUTO
            wrapJobExecutionInUserTransaction: false
            # 是否开启守护线程
            makeSchedulerThreadDaemon: true
            rmi:
              export: false
              proxy: false
          # JobStore sql: https://github.com/quartz-scheduler/quartz/tree/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore
          jobStore:
            # 在调度流程的第一步，也就是拉取待即将触发的triggers时，是上锁的状态，即不会同时存在多个线程拉取到相同的trigger的情况，也就避免的重复调度的危险。参考：https://segmentfault.com/a/1190000015492260
            acquireTriggersWithinLock: true
            #dataSource: DS
            # JobStore 实现类
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
            # 使用完全兼容JDBC的驱动
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            # Quartz 表前缀
            tablePrefix: QRTZ_
            dontSetAutoCommitFalse: false
            # 是否将JobDataMap中的属性转为字符串存储
            useProperties: false
            #在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。
            misfireThreshold: 60000
            isClustered: true
            #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
            clusterCheckinInterval: 5000
            maxMisfiresToHandleAtATime: 1
          dataSource:
            DS:
              driver: com.mysql.cj.jdbc.Driver
              URL: jdbc:mysql://${TAOTAO_CLOUD_MYSQL_HOST:192.168.218.2}:${TAOTAO_CLOUD_MYSQL_PORT:3306}/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
              username: ${TAOTAO_CLOUD_MYSQL_USERNAME:root}
              password: ${TAOTAO_CLOUD_MYSQL_PASSWORD:123456}
              maxConnections: 5
              validationQuery: select 0
              provider: hikaricp
          # 线程池相关配置
          threadPool:
            # 指定线程数，至少为1（无默认值），一般设置为1-100直接的整数，根据系统资源配置。默认为 10
            threadCount: 25
            # 设置线程的优先级（最大为java.lang.Thread.MAX_PRIORITY 10，最小为Thread.MIN_PRIORITY 1，默认为5）
            threadPriority: 5
            threadNamePrefix: taotao-cloud-quartz-executor
            # 指定线程池实现类，对调度器提供固定大小的线程池
            class: org.quartz.simpl.SimpleThreadPool
            threadsInheritContextClassLoaderOfInitializingThread: true
            # 指定在线程池里面创建的线程是否是守护线程
            makeThreadsDaemons: true
  lifecycle:
    timeout-per-shutdown-phase: 30s
  thymeleaf:
    mode: HTML
    prefix: classpath:/static/
    suffix: .html
    encoding: UTF-8
    cache: false
    enabled: true
  main:
    allow-circular-references: true
    allow-bean-definition-overriding: true
    banner-mode: off
    register-shutdown-hook: true
    cloud-platform: kubernetes
    web-application-type: servlet
  application:
    name: taotao-cloud-modulith
    admin:
      enabled: true
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  web:
    resources:
      # pro环境关闭
      add-mappings: true
  mvc:
    servlet:
      load-on-startup: 1
    format:
      date-time: yyyy-MM-dd HH:mm:ss
      date: yyyy-MM-dd
      time: HH:mm:ss
    dispatch-trace-request: true
    dispatch-options-request: true
    log-request-details: true
    log-resolved-exception: true
  servlet:
    multipart:
      enabled: true
      file-size-threshold: 2KB
      max-file-size: 200MB
      max-request-size: 215MB
  sleuth:
    enabled: true
    web:
      client:
        enabled: true
    sampler:
      probability: 1.0
      refresh:
        enabled: true
  zipkin:
    enabled: true
    base-url: http://192.168.218.2:9411/
    discoveryClientEnabled: false
    sender:
      type: WEB
    service:
      name: ${spring.application.name}
    compression:
      enabled: true
    encoder: proto3
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    #    url: jdbc:mysql://${TAOTAO_CLOUD_MYSQL_HOST:192.168.218.2}:${TAOTAO_CLOUD_MYSQL_PORT:3306}/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false&rewriteBatchedStatements=true&zeroDateTimeBehavior=convertToNull&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&allowMultiQueries=true&autoReconnect=true
    #    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:p6spy:mysql://${TAOTAO_CLOUD_MYSQL_HOST:192.168.218.2}:${TAOTAO_CLOUD_MYSQL_PORT:3306}/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    username: ${TAOTAO_CLOUD_MYSQL_USERNAME:root}
    password: ${TAOTAO_CLOUD_MYSQL_PASSWORD:123456}
    hikari:
      # 从池返回的连接的默认自动提交行为 默认true
      auto-commit: true
      # 客户端等待连接池的最大毫秒数
      connection-timeout: 350000
      # 允许连接在连接池中空闲的最大时间（毫秒）
      idle-timeout: 180000
      login-timeout: 5
      # 连接测试活动的最大时间量
      validation-timeout: 3000
      # 池中关闭连接后的最长生命周期
      max-lifetime: 1800000
      read-only: false
      connection-test-query: SELECT 1
      maximum-pool-size: 200
      minimum-idle: 10
      pool-name: DatebookHikariCP
      register-mbeans: true
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
    dynamic:
      enabled: false
      datasource:
        master:
          type: com.zaxxer.hikari.HikariDataSource
          url: jdbc:p6spy:mysql://${TAOTAO_CLOUD_MYSQL_HOST:192.168.218.2}:${TAOTAO_CLOUD_MYSQL_PORT:3306}/${spring.application.name}?useUnicode=true&rewriteBatchedStatements=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
          username: ${TAOTAO_CLOUD_MYSQL_USERNAME:root}
          password: ${TAOTAO_CLOUD_MYSQL_PASSWORD:123456}
          driver-class-name: com.p6spy.engine.spy.P6SpyDriver
          hikari:
            is-auto-commit: true
            connection-timeout: 30000
            idle-timeout: 25000
            login-timeout: 5
            validation-timeout: 3000
            max-lifetime: 50000
            is-read-only: false
            connection-test-query: SELECT 1
            max-pool-size: 15
            min-idle: 10
            pool-name: DatebookHikariCP
            register-mbeans: true
            data-source-properties:
              cachePrepStmts: true
              prepStmtCacheSize: 250
  jpa:
    database: mysql
    database-platform: mysql
    #hibernate.show_sql 配置属性，因为它基本上等同于使用 System.out.println 打印 SQL 查询
    #如果要记录SQL，请不要使用show_sql方式，它是不会记录到日志文件中的，只会输出到控制台中
    show-sql: true
    open-in-view: true
    generate-ddl: true
    hibernate:
      ddl-auto: update
      naming:
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
    properties:
      hibernate:
        hbm2ddl.auto: update
        dialect: org.hibernate.dialect.MySQL8Dialect
    #properties:
    #  javax:
    #    persistence:
    #      sharedCache:
    #        mode: ENABLE_SELECTIVE
    #  hibernate:
    #    dialect: mysql
    #    format_sql: false
    #    show_sql: false
    #    generate_statistics: false
    #    cache:
    #      use_query_cache: true
    #      use_second_level_cache: true
    #      region:
    #        factory_class: 二级缓存class
    #    javax:
    #      cache:
    #        missing_cache_strategy: create
    #    temp:
    #      use_jdbc_metadata_defaults: false
  redis:
    #host: ${TAOTAO_CLOUD_REDIS_HOST:192.168.218.2}
    #port: ${TAOTAO_CLOUD_REDIS_PORT:6379}
    #sentinel:
    #  master:
    #  nodes:
    database: 1
    password: ${TAOTAO_CLOUD_REDIS_PASSWORD:taotao-cloud}
    connect-timeout: 60000
    cluster:
      nodes: 192.168.218.2:6381,192.168.218.2:6382,192.168.218.2:6383,192.168.218.2:6384,192.168.218.2:6385,192.168.218.2:6386
      max-redirects: 3
    client-type: lettuce
    lettuce:
      pool:
        max-active: 1500
        max-wait: 60000
        max-idle: 500
        min-idle: 100
    redisson:
      config: |
        clusterServersConfig:
          idleConnectionTimeout: 10000
          connectTimeout: 60000
          timeout: 60000
          retryAttempts: 3
          retryInterval: 1500
          failedSlaveReconnectionInterval: 3000
          failedSlaveCheckInterval: 60000
          password: taotao-cloud
          subscriptionsPerConnection: 5
          clientName: null
          loadBalancer: !<org.redisson.connection.balancer.RoundRobinLoadBalancer> {}
          subscriptionConnectionMinimumIdleSize: 1
          subscriptionConnectionPoolSize: 50
          slaveConnectionMinimumIdleSize: 24
          slaveConnectionPoolSize: 64
          masterConnectionMinimumIdleSize: 24
          masterConnectionPoolSize: 64
          readMode: "SLAVE"
          subscriptionMode: "SLAVE"
          nodeAddresses:
          - "redis://192.168.218.2:6381"
          - "redis://192.168.218.2:6382"
          - "redis://192.168.218.2:6383"
          - "redis://192.168.218.2:6384"
          - "redis://192.168.218.2:6385"
          - "redis://192.168.218.2:6386"
          scanInterval: 1000
          pingConnectionInterval: 0
          keepAlive: false
          tcpNoDelay: false
        threads: 16
        nettyThreads: 32
        codec: !<org.redisson.codec.MarshallingCodec> {}
        transportMode: "NIO"
  #elasticsearch:
  #  uris: ${TAOTAO_CLOUD_ELASTICSEARCH_HOST:http://192.168.218.2}:${TAOTAO_CLOUD_ELASTICSEARCH_PORT:9200}
  #  password:
  #  username:
  data:
    elasticsearch:
      repositories:
        enabled: false
    mongodb:
      database: yapi
      host: 192.168.218.2
      port: 27017
      username:
      password:
      #是否记录慢查询到数据库中
      slowQuery: true
      #慢查询最短时间,默认为1000毫秒
      slowTime: 2000
  kafka:
    bootstrap-servers: 192.168.218.2:9092,192.168.218.2:9093,192.168.218.2:9094
    producer:
      retries: 1
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: 0
      compression-type: gzip
      properties:
        linger.ms: 100
        partitioner.class: org.apache.kafka.clients.producer.RoundRobinPartitioner
    consumer:
      auto-commit-interval: 1S
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      concurrency: 5
      ack-mode: manual_immediate
      missing-topics-fatal: false
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://192.168.218.2:33401/oauth2/jwks
  shardingsphere:
    enabled: false
    schema:
      name: taotao-cloud-shardingsphere
    props:
      sql-show: true
      check-table-metadata-enabled: true
      kernel-executor-size: 20
      max:
        connections:
          size:
            pre:
              #开启内存模式
              query: 50
    mode:
      type: Cluster
      overwrite: true
      repository:
        type: ZooKeeper
        props:
          namespace: taotao-cloud-shardingsphere
          server-lists: 192.168.218.2:2181,192.168.218.2:2182,192.168.218.2:2183
          retryIntervalMilliseconds: 500
          maxRetries: 3
          timeToLiveSeconds: 60
          operationTimeoutMilliseconds: 500
          digest:
    datasource:
      names: ds-master-0,ds-slave-0-1,ds-slave-0-2,ds-master-1,ds-slave-1-1,ds-slave-1-2
      ds-master-0:
        jdbc-url: jdbc:mysql://${TAOTAO_CLOUD_MYSQL_HOST:192.168.218.2}:3316/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false&rewriteBatchedStatements=true
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
        username: ${TAOTAO_CLOUD_MYSQL_USERNAME:root}
        password: ${TAOTAO_CLOUD_MYSQL_PASSWORD:123456}
        auto-commit: true
        connection-timeout: 30000
        idle-timeout: 25000
        login-timeout: 5
        validation-timeout: 3000
        max-lifetime: 50000
        read-only: false
        connection-test-query: SELECT 1
        maximum-pool-size: 15
        minimum-idle: 10
        pool-name: DatebookHikariCP
        register-mbeans: true
        data-source-properties:
          cachePrepStmts: true
          prepStmtCacheSize: 250
      ds-slave-0-1:
        jdbc-url: jdbc:mysql://${TAOTAO_CLOUD_MYSQL_HOST:192.168.218.2}:3326/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false&rewriteBatchedStatements=true
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
        username: ${TAOTAO_CLOUD_MYSQL_USERNAME:root}
        password: ${TAOTAO_CLOUD_MYSQL_PASSWORD:123456}
        auto-commit: true
        connection-timeout: 30000
        idle-timeout: 25000
        login-timeout: 5
        validation-timeout: 3000
        max-lifetime: 50000
        read-only: false
        connection-test-query: SELECT 1
        maximum-pool-size: 15
        minimum-idle: 10
        pool-name: DatebookHikariCP
        register-mbeans: true
        data-source-properties:
          cachePrepStmts: true
          prepStmtCacheSize: 250
      ds-slave-0-2:
        jdbc-url: jdbc:mysql://${TAOTAO_CLOUD_MYSQL_HOST:192.168.218.2}:3336/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false&rewriteBatchedStatements=true
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
        username: ${TAOTAO_CLOUD_MYSQL_USERNAME:root}
        password: ${TAOTAO_CLOUD_MYSQL_PASSWORD:123456}
        auto-commit: true
        connection-timeout: 30000
        idle-timeout: 25000
        login-timeout: 5
        validation-timeout: 3000
        max-lifetime: 50000
        read-only: false
        connection-test-query: SELECT 1
        maximum-pool-size: 15
        minimum-idle: 10
        pool-name: DatebookHikariCP
        register-mbeans: true
        data-source-properties:
          cachePrepStmts: true
          prepStmtCacheSize: 250
      ds-master-1:
        jdbc-url: jdbc:mysql://${TAOTAO_CLOUD_MYSQL_HOST:192.168.218.2}:3376/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false&rewriteBatchedStatements=true
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
        username: ${TAOTAO_CLOUD_MYSQL_USERNAME:root}
        password: ${TAOTAO_CLOUD_MYSQL_PASSWORD:123456}
        auto-commit: true
        connection-timeout: 30000
        idle-timeout: 25000
        login-timeout: 5
        validation-timeout: 3000
        max-lifetime: 50000
        read-only: false
        connection-test-query: SELECT 1
        maximum-pool-size: 15
        minimum-idle: 10
        pool-name: DatebookHikariCP
        register-mbeans: true
        data-source-properties:
          cachePrepStmts: true
          prepStmtCacheSize: 250
      ds-slave-1-1:
        jdbc-url: jdbc:mysql://${TAOTAO_CLOUD_MYSQL_HOST:192.168.218.2}:3386/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false&rewriteBatchedStatements=true
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
        username: ${TAOTAO_CLOUD_MYSQL_USERNAME:root}
        password: ${TAOTAO_CLOUD_MYSQL_PASSWORD:123456}
        auto-commit: true
        connection-timeout: 30000
        idle-timeout: 25000
        login-timeout: 5
        validation-timeout: 3000
        max-lifetime: 50000
        read-only: false
        connection-test-query: SELECT 1
        maximum-pool-size: 15
        minimum-idle: 10
        pool-name: DatebookHikariCP
        register-mbeans: true
        data-source-properties:
          cachePrepStmts: true
          prepStmtCacheSize: 250
      ds-slave-1-2:
        jdbc-url: jdbc:mysql://${TAOTAO_CLOUD_MYSQL_HOST:192.168.218.2}:3396/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false&rewriteBatchedStatements=true
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
        username: ${TAOTAO_CLOUD_MYSQL_USERNAME:root}
        password: ${TAOTAO_CLOUD_MYSQL_PASSWORD:123456}
        auto-commit: true
        connection-timeout: 30000
        idle-timeout: 25000
        login-timeout: 5
        validation-timeout: 3000
        max-lifetime: 50000
        read-only: false
        connection-test-query: SELECT 1
        maximum-pool-size: 15
        minimum-idle: 10
        pool-name: DatebookHikariCP
        register-mbeans: true
        data-source-properties:
          cachePrepStmts: true
          prepStmtCacheSize: 250
    rules:
      sql-parser:
        sql-comment-parse-enabled: false
      readwrite-splitting:
        load-balancers:
          round-robin:
            type: ROUND_ROBIN
            props:
              worker-id: 123
          random:
            type: RANDOM
            props:
              worker-id: 123
        data-sources:
          ds-master-0:
            type: Static
            load-balancer-name: round-robin
            props:
              write-data-source-name: ds-master-0
              read-data-source-names: ds-slave-0-1,ds-slave-0-2
          ds-master-1:
            type: Static
            load-balancer-name: round-robin
            props:
              write-data-source-name: ds-master-1
              read-data-source-names: ds-slave-1-1,ds-slave-1-2
      sharding:
        sharding-algorithms:
          database-inline:
            type: INLINE
            props:
              algorithm-expression: ds-master-$->{id % 2}
          tt-sys-user-inline:
            type: INLINE
            props:
              algorithm-expression: tt_sys_user_$->{id % 3}
        default-database-strategy:
          standard:
            sharding-column: id
            sharding-algorithm-name: database-inline
        key-generators:
          snowflake:
            type: SNOWFLAKE
            props:
              worker-id: 123
        tables:
          tt_sys_user:
            actual-data-nodes: ds-master-$->{0..1}.tt_sys_user_$->{0..2}
            key-generate-strategy:
              column: id
              key-generator-name: snowflake
            database-strategy:
              standard:
                sharding-column: id
                sharding-algorithm-name: database-inline
            table-strategy:
              standard:
                sharding-column: id
                sharding-algorithm-name: tt-sys-user-inline
  rabbitmq:
    addresses: 192.168.218.2:5672,192.168.218.2:5673,192.168.218.2:5674
    username: guest
    password: guest
    virtual-host: /
  cloud:
    compatibility-verifier:
      enabled: false
    loadbalancer:
      enabled: true
    stream:
      bindings:
        sms-output:
          destination: sms-topic
          binder: rabbit
        sms-input:
          destination: sms-topic
          group: sms-group
          binder: rabbit
        email-output:
          destination: email-topic
          content-type: application/json
          binder: rocketmq
        email-input:
          destination: email-topic
          group: email-group
          binder: rocketmq
        order-output:
          destination: order-topic
          content-type: application/json
          binder: kafka
        order-input:
          destination: order-topic
          group: order-group
          binder: kafka
      rocketmq:
        binder:
          name-server: 192.168.218.2:9876
      rabbit:
        bindings:
          sms-output:
            producer:
              # 发送端路由key
              #routing-key-expression: headers.routingKey
              # 开启延时队列
              delayed-exchange: false
          sms-input:
            consumer:
              # 生产监听路由表达式
              #binding-routing-key: login.user.succeed
              # 开启延时队列
              delayed-exchange: false
              # 绑定死信队列
              #auto-bind-dlq: true
              # 重投到死信队列并带有报错信息
              #republish-to-dlq: true
        binder:
          admin-addresses: 192.168.218.2:5672
      kafka:
        binder:
          brokers: 192.168.218.2:9092
          auto-create-topics: true
        bindings:
          order-output:
            producer:
              sync: true
              bufferSize: 16384
          order-input:
            consumer:
              txCommitRecovered: true
taotao:
  boot:
    zookeeper:
      enabled: true
      connectString: 192.168.218.2:2181,192.168.218.2:2182,192.168.218.2:2183
    dozer:
      enabled: true
    sensitive:
      enabled: true
    lock:
      enabled: true
      type: redis
    limit:
      enabled: true
    idgenerator:
      enabled: true
      type: redis
    idempotent:
      enabled: true
    retry:
      enabled: true
    xss:
      enabled: true
    sign:
      enabled: true
    web:
      interceptor:
        doubt-api: true
        header: true
        prometheus: true
      filter:
        version: true
        tenant: true
        trace: true
        web-context: true
        report: true
        ping: true
    shardingsphere:
      enabled: false
    sentinel:
      enabled: true
    seata:
      enabled: true
    rocketmq:
      enabled: false
    redis:
      cache:
        enabled: true
        type: redis
    rabbitmq:
      enabled: false
    pulsar:
      enabled: false
    pay:
      enabled: false
    #third:
    #  client:
    #    forest:
    #      enabled: true
    #    retrofit:
    #      enabled: true
    p6spy:
      enabled: true
      dateformat: yyyy-MM-dd HH:mm:ss
      driverlist: com.mysql.cj.jdbc.Driver
      database-dialect-date-format: yyyy-MM-dd HH:mm:ss
      appender: com.taotao.boot.data.p6spy.logger.KafkaLogger
      logfile: ${user.home}/logs/${spring.application.name}/p6spy/p6spy.log
    oss:
      enabled: false
    springdoc:
      enabled: true
      group: ${spring.applicaion.name}
      version: ${ttcVersion}
      title: 系统管理模块
    mongodb:
      enabled: true
    metrics:
      enabled: false
      druid:
        enabled: false
      sentinel:
        enabled: false
      undertow:
        enabled: false
    logger:
      enabled: true
      request:
        enabled: true
        types:
          - kafka
          - redis
          - logger
    laytpl:
      enabled: false
    kafka:
      enabled: true
    ip2region:
      enabled: true
    monitor:
      enabled: true
      dump:
        enabled: true
      export:
        enabled: true
      ping:
        enabled: true
      warn:
        enabled: true
    feign:
      enabled: true
      loadbalancer:
        enabled: true
    encrypt:
      enabled: false
      filter:
        enabled: false
    elk:
      enabled: false
    elasticsearch:
      enabled: false
    dubbo:
      enabled: true
    data:
      mybatis-plus:
        enabled: true
        auto-fill:
          enabled: true
        dynamic:
          datasource:
            enabled: false
        tenant:
          enabled: false
      jpa:
        enabled: true
        packages: com.taotao.cloud.sys.biz.model.entity
        tenant:
          enabled: false
    core:
      enabled: true
    captcha:
      enabled: false
    mail:
      enabled: false
    sms:
      enabled: true
      type: aliyun
      aliyun:
        access-key-id: xxxx
        access-key-secret: lsdflsdf
        sign-name: sdfaslfd
        templates:
          ch: xlsldf
        params-orders:
          ch:
            - lsdkfjl
            - sdflksf
    websocket:
      enabled: true
      netty:
        enabled: true
    security:
      ignore-url:
        - /sys/buyer/dict/test/{code}

mybatis-plus:
  #实体扫描 多个package用户逗号或者分号分割
  typeAliasesPackage: com.taotao.cloud.sys.biz.model.entity
  # mapper xml 地址
  mapperLocations: classpath:mapper/*.xml
  global-config:
    # 关闭mp3.0自带的banner
    banner: false
    db-config:
      #主键类型
      id-type: auto
      #驼峰下划线转换
      table-underline: true
      #逻辑删除全局值 1已删除
      logic-delete-value: 1
      #逻辑未删除全局值 0未删除
      logic-not-delete-value: 0
      #字段策略
      insert-strategy: not_null
      update-strategy: not_null
      where-strategy: not_empty
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    # 日志打印参数class
    #log-impl: com.taotao.boot.data.mybatis.logging.CustomStdOutImpl
    #log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    #查询时，关闭关联对象即时加载以提高性能
    lazyLoadingEnabled: true
    #设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指定)，不会加载关联表的所有字段，以提高性能
    aggressiveLazyLoading: false
    #对于未知的SQL查询，允许返回不同的结果集以达到通用的效果
    multipleResultSetsEnabled: true
    #允许使用列标签代替列名
    useColumnLabel: true
    #允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖
    useGeneratedKeys: true
    #给予被嵌套的resultMap以字段-属性的映射支持
    autoMappingBehavior: FULL
    #对于批量更新操作缓存SQL以提高性能
    defaultExecutorType: SIMPLE
    #数据库超过15秒仍未响应则超时，部分语句可单独指定超时时间
    defaultStatementTimeout: 15
    jdbcTypeForNull: NULL
    #当参数为NULL且字段列可为空的Double等类型时可直接当NULL插入
    callSettersOnNulls: true
    #打印sql语句
    logPrefix: "dao."
  configuration-properties:
    CONSTANT_CIPHER_TEXT: taotao-cloud


feign:
  sentinel:
    enabled: true
  okhttp:
    enabled: true
  httpclient:
    enabled: false
    max-connections: 1000
    max-connections-per-route: 100
  client:
    config:
      feignName:
        connectTimeout: 30000
        readTimeout: 30000
  compression:
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true

management:
  info:
    java:
      enabled: true
    env:
      enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
    health:
      show-details: ALWAYS
    shutdown:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
  health:
    elasticsearch:
      enabled: false
    rabbit:
      enabled: false

logging:
  file:
    path: ${user.home}/logs/${spring.application.name}
  logback:
    rollingpolicy:
      max-file-size: 10GB
      max-history: 30
      clean-history-on-start: true
      total-size-cap: 20GB
  level:
    root: INFO
    org.apache.zookeeper.ZooKeeper: error
    com.taotao.cloud.sys.api.feign: debug
    #org.springframework.cloud.openfeign: debug
    #org.springframework.web: off
    #org.springframework.security: off
    #org.springframework.security.oauth2: off
    #org.springframework.boot.autoconfigure: off
    #org.elasticsearch.client: debug
    #org.apache.kafka: off

springdoc:
  packages-to-exclude:
    - cn.afterturn.easypoi.wps.controller
    - com.taotao.boot.captcha.controller

test:
  baseUrl: https://www.baidu.com

tlog:
  pattern: "$preApp:$preIp:$spanId:$traceId"
  enableInvokeTimePrint: false
  idGenerator: com.taotao.boot.logger.tlog.TlogIdGenerator
  mdcEnable: true

pagehelper:
  helper-dialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql

kylin:
  lock:
    acquire-timeout: 3000       #获取锁超时时间 默认值3000L 单位：毫秒
    expire: 30000               #过期时间，默认值30000L 单位：毫秒
    retry-interval: 100         #获取锁失败时重试时间间隔，默认值100L 单位：毫秒
    lock-key-prefix: kylin-lock #锁前缀 默认配置
    primary-executor: com.taotao.boot.lock.kylin.executor.redisson.RedissonLockExecutor #默认执行器。默认redisson>zookeeper
    redisson: true              #是否开启redisson 默认true
    #zookeeper:
    #  zk-servers: 192.168.218.2:2181 #zk的server地址，多个server之间使用英文逗号分隔开 。配置地址则开启zookeeper
    #  session-timeout: 60000     #会话超时时间，默认值60000 单位：毫秒
    #  connection-timeout: 15000  #连接超时时间，默认值15000 单位：毫秒
    #  base-sleep-time-ms: 5000   #初始sleep时间，默认值5000 单位：毫秒
    #  max-retries: 3             #最大失败重试次数
    #  namespace: curator/kylin/lock #命名空间
